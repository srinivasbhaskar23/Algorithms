public class BalancedBinaryTree {

  public static void main(String[] args) {
		// TODO Auto-generated method stub {1,-2,-3,1,3,-2,#,-1} //{-1,5,#,4,#,#,2,-4}
		BalancedBinaryTree bsum = new BalancedBinaryTree();
		TreeNode x = new TreeNode(-1);
		x.left = new TreeNode(5);
		x.right = new TreeNode(9);
		x.left.right = new TreeNode(2);
		x.left.left = new TreeNode(1);
		x.left.left.left = new TreeNode(3);
		x.left.left.right = new TreeNode(6);
		
		/*x.left = new TreeNode(5);
		x.right = new TreeNode(9);
		x.left.right = new TreeNode(2);
		x.left.right.right = new TreeNode(-6);
		x.left.right.right.right = new TreeNode(6);
		x.left.left = new TreeNode(4);		
		x.left.left.left = new TreeNode(-2);
		x.left.left.right = new TreeNode(2);
		x.left.left.right.left = new TreeNode(-4);*/
		/*System.out.println("Min depth of the tree : "+bsum.minDepth(x));	
		System.out.println("Max depth of the tree : "+bsum.maxDepth(x));*/
		/*if((bsum.maxDepth(x)-bsum.minDepth(x))>1 )
			System.out.println("Balanced tree : "+false);
		else
			System.out.println("Balanced tree : "+true);*/
		System.out.println("Balanced tree : "+bsum.isBalanced(x));
	}
	
	
	public boolean isBalanced(TreeNode root) {
		isBalanced=true;
		depth(root);
		return isBalanced; 
	}
	boolean isBalanced=true;
	public int depth(TreeNode root) {
		if (root == null)
			return 0;
		if((root.left == null) && (root.right == null)) {
			return 1;
		} else if (root.right == null) {
			int dep=depth(root.left);
			if(dep > 1)
				isBalanced=false;
			return dep+1;
		} else if (root.left == null) {
			int dep=depth(root.right);
			if(dep > 1)
				isBalanced=false;
			return dep+1;
		}
		int leftHeight = depth(root.left)+1;
		int rightHeight = depth(root.right)+1;
		if(leftHeight > rightHeight){
			if((leftHeight-rightHeight)>1)
				isBalanced=false;
			return leftHeight;
		}else{ 
			if((rightHeight-leftHeight)>1)
				isBalanced=false;
			return rightHeight;
		}		
	}

}
