
public class BinaryTreeMaxSum {

  public static void main(String[] args) {
		// TODO Auto-generated method stub {1,-2,-3,1,3,-2,#,-1} {-1,5,#,4,#,#,2,-4}
		BinaryTreeMaxSum bsum = new BinaryTreeMaxSum();
		TreeNode x = new TreeNode(-1);
		x.left = new TreeNode(5);
		x.left.left = new TreeNode(4);
		x.left.left.right = new TreeNode(2);
		x.left.left.right.left = new TreeNode(-4);
		
		//x.right = new TreeNode(3);
		System.out.println(bsum.maxPathSum(x));	
	}	
	  //Definition for binary tree
	  static class TreeNode {
	      int val;
	      TreeNode left;
	      TreeNode right;
	      TreeNode(int x) { val = x; }
	  }
 

	 class ReturnObject{
		 int maxSum;
		 int pathSum;
		 public ReturnObject(int ms,int ps) {
			this.maxSum = ms;
			this.pathSum = ps;
		}
	 }
	  
	 int maxOfNumbers(int x,int y,int z){
		 return Math.max(Math.max(x, y), z);
	 }
	 
	 int maxOfNumbers(int x,int y,int z,int m,int n){
		 return maxOfNumbers(maxOfNumbers(x, y, z),m,n);
	 }
	 
	 public int maxPathSum(TreeNode root) {
		 ReturnObject r = getPathSum(root);
		 return Math.max(r.maxSum,r.pathSum);
	 }
	 
    public ReturnObject getPathSum(TreeNode root) {
    	if((root.left==null) && (root.right==null))
    		return new ReturnObject(root.val, root.val);
    	else if(root.right==null){
    		ReturnObject maxLeft = getPathSum(root.left);
    		return new ReturnObject(maxOfNumbers(root.val, root.val+maxLeft.pathSum, root.val+maxLeft.maxSum,maxLeft.maxSum,maxLeft.pathSum),(root.val+maxLeft.pathSum));
    	}else if(root.left==null){
    		ReturnObject maxRight = getPathSum(root.right);
    		return new ReturnObject(maxOfNumbers(root.val, root.val+maxRight.maxSum, root.val+maxRight.pathSum,maxRight.maxSum, maxRight.pathSum),(root.val+maxRight.pathSum));
    	}    		
    	ReturnObject maxRight = getPathSum(root.right);
    	ReturnObject maxLeft = getPathSum(root.left);
		return new ReturnObject(Math.max(root.val,maxOfNumbers(maxRight.maxSum+root.val,maxLeft.maxSum+root.val,maxRight.maxSum,maxLeft.maxSum,(maxRight.pathSum+maxLeft.pathSum+root.val))),
				root.val+Math.max(maxRight.pathSum, maxLeft.pathSum));
    }
     
}
