public class LevelOrder {

  public static void main(String[] args) {
		// TODO Auto-generated method stub {1,-2,-3,1,3,-2,#,-1} //{-1,5,#,4,#,#,2,-4}
		LevelOrder bsum = new LevelOrder();
		TreeNode x = new TreeNode(-1);
		x.left = new TreeNode(5);
		/*x.left.right = new TreeNode(2);
		x.left.right.right = new TreeNode(-6);
		x.left.right.right.right = new TreeNode(6);
		x.left.left = new TreeNode(4);		
		x.left.left.left = new TreeNode(-2);
		x.left.left.right = new TreeNode(2);
		x.left.left.right.left = new TreeNode(-4);*/
		bsum.levelOrder(x);
		System.out.println("done ");	
	}
	
	 HashMap<Integer,ArrayList<Integer>> map = new HashMap<Integer,ArrayList<Integer>>();
	 ArrayList<ArrayList<Integer>> listOfList = new ArrayList<ArrayList<Integer>>();
	 ArrayList<Integer> levelList = new ArrayList<Integer>();
	

	public ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {
		map.clear();listOfList.clear();
		levelList = new ArrayList<Integer>();
		if(root == null)
			return listOfList;
		levelList.add(root.val);
		map.put(1,levelList);
		levelOrder(root,1);
		listOfList.addAll(map.values());
		return listOfList; 
	}
	
	public void levelOrder(TreeNode root, int level) {
		 if(root == null){
			return;
		}else if ((root.left == null)&&(root.right == null)) {
			return;
		}else if (root.left == null) {
			levelOrder(root.right,level+1);
		}else if (root.right == null) {
			levelOrder(root.left,level+1);
		}else if((root.left != null)&&(root.right != null)) {
			levelOrder(root.left,level+1);
			levelOrder(root.right,level+1);
		}
		 
		 if(root.left != null)
			 insertIntoList(root.left.val,level+1);
		 if(root.right != null)
			 insertIntoList(root.right.val,level+1);
		 return;
    }
	private void insertIntoList(int val, int level){
		 if((map!=null)&&(map.get(level) == null)){
			 levelList = new ArrayList<Integer>();
			 map.put(level, levelList);
		 }
		 map.get(level).add(val);
	}
}
