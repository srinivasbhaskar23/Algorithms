public class MinDepthBinaryTree {
  
	public static void main(String[] args) {
		// TODO Auto-generated method stub {1,-2,-3,1,3,-2,#,-1} //{-1,5,#,4,#,#,2,-4}
		MinDepthBinaryTree bsum = new MinDepthBinaryTree();
		TreeNode x = new TreeNode(-1);
		x.left = new TreeNode(5);
		x.right = new TreeNode(9);
		x.left.right = new TreeNode(2);
		x.left.right.right = new TreeNode(-6);
		x.left.right.right.right = new TreeNode(6);
		x.left.left = new TreeNode(4);		
		x.left.left.left = new TreeNode(-2);
		x.left.left.right = new TreeNode(2);
		x.left.left.right.left = new TreeNode(-4);
		System.out.println("Min depth of the tree : "+bsum.minDepth(x));	
		System.out.println("Max depth of the tree : "+bsum.maxDepth(x));
	}

	public int minDepth(TreeNode root) {
		if (root == null)
			return 0;
		if ((root.left == null) && (root.right == null)) {
			return 1;
		} else if (root.right == null) {
			return minDepth(root.left) + 1;
		} else if (root.left == null) {
			return minDepth(root.right) + 1;
		}
		return (1 + (Math.min(minDepth(root.left), minDepth(root.right))));
	}

	public int maxDepth(TreeNode root) {
		if (root == null)
			return 0;
		if ((root.left == null) && (root.right == null)) {
			return 1;
		} else if (root.right == null) {
			return maxDepth(root.left) + 1;
		} else if (root.left == null) {
			return maxDepth(root.right) + 1;
		}
		return (1 + (Math.max(maxDepth(root.left), maxDepth(root.right))));
	}
}
