public class PathSum {
  
	static class TreeNode {
	      int val;
	      TreeNode left;
	      TreeNode right;
	      TreeNode(int x) { val = x; }
	  }
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub {1,-2,-3,1,3,-2,#,-1} 
		//{-1,5,#,4,#,#,2,-4}
		PathSum bsum = new PathSum();
		TreeNode x = new TreeNode(5);
		x.left = new TreeNode(4);
		x.right = new TreeNode(8);
		x.left.left = new TreeNode(11);
		//x.left.right = new TreeNode(3);
		x.right.left = new TreeNode(13);
		x.right.right = new TreeNode(4);
		x.left.left.left = new TreeNode(7);
		x.left.left.right = new TreeNode(2);
		/*x.left.right.left = new TreeNode(-1);
		x.left.right.right = new TreeNode(-5);
		x.right.left.left = new TreeNode(7);*/
		x.right.right.right = new TreeNode(1);
	
		//x.right = new TreeNode(3);
		
		System.out.println(bsum.hasPathSum(x,2));	
		System.out.println(bsum.hasPathSum(x,45));
		System.out.println(bsum.hasPathSum(x,55));
		System.out.println(bsum.hasPathSum(x,27));
		System.out.println(bsum.hasPathSum(x,22));
		System.out.println(bsum.hasPathSum(x,26));
		System.out.println(bsum.hasPathSum(x,18));
		System.out.println(bsum.hasPathSum(x,11));
	}
	
	public boolean hasPathSum(TreeNode root, int sum) {
		if(root == null)
			return false;
		if((root.left==null) && (root.right==null))
    		return (sum-root.val==0) ?true:false ;
		else if(root.right==null){
			return hasPathSum(root.left, sum-root.val);
		}else if(root.left==null){
			return hasPathSum(root.right, sum-root.val);
		}
		return hasPathSum(root.left, sum-root.val) || hasPathSum(root.right, sum-root.val);    
    }
}

